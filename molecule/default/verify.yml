---
- name: Verify
  hosts: all
  gather_facts: false
  vars_files:
    - ../../defaults/main.yml
    - ../../vars/main.yml
  tasks:
    - name: "Roda um comando do Nomad"
      command: "nomad -version"
      register: nomad_version_output
    - name: "Verificar que o Nomad está instalado com a versão correta"
      assert:
        that:
          - nomad_version_output.rc == 0
          - "'{{nomad_version}}' in nomad_version_output.stdout"

    - name: "Ler diretórios de configuração do Nomad"
      stat:
        path: "{{item}}"
      loop:
        - /etc/nomad.d/
        - /etc/nomad.d/certs/
      register: nomad_config_dir_output
    - name: "Verificar os diretórios de configuração do Nomad"
      assert:
        that:
          - "nomad_config_dir_output.results[{{index}}].stat.exists"
          - "nomad_config_dir_output.results[{{index}}].stat.isdir"
          - "nomad_config_dir_output.results[{{index}}].stat.pw_name == '{{nomad_user}}'"
          - "nomad_config_dir_output.results[{{index}}].stat.gr_name == '{{nomad_group}}'"
      loop:
        - /etc/nomad.d/
        - /etc/nomad.d/certs/
      loop_control:
        index_var: index

    - name: "Ler arquivos padrão de configuração do Nomad"
      stat:
        path: "/etc/nomad.d/{{item}}"
      loop:
        - nomad.hcl
      register: nomad_default_config_files_output
    - name: "Verificar que os arquivos padrão de configuração do Nomad foram removidos"
      assert:
        that:
          - "not nomad_default_config_files_output.results[{{index}}].stat.exists"
      loop:
        - nomad.hcl
      loop_control:
        index_var: index

    - name: "Ler arquivos de configuração do Nomad"
      stat:
        path: "/etc/nomad.d/{{item}}"
      loop:
        - client.hcl.tpl
        - server.hcl.tpl
        - nomad.env
      register: nomad_config_files_output
    - name: "Verificar os arquivos de configuração do Nomad"
      assert:
        that:
          - "nomad_config_files_output.results[{{index}}].stat.exists"
          - "nomad_config_files_output.results[{{index}}].stat.pw_name == '{{nomad_user}}'"
          - "nomad_config_files_output.results[{{index}}].stat.gr_name == '{{nomad_group}}'"
      loop:
        - client.hcl.tpl
        - server.hcl.tpl
        - nomad.env
      loop_control:
        index_var: index

    - name: "Ler conteúdo dos arquivos de configuração"
      slurp:
        src: "/etc/nomad.d/{{item}}"
      loop:
        - client.hcl.tpl
        - server.hcl.tpl
      register: nomad_config_file_content
    - name: "Verificar conteúdo do arquivo de configuração do client"
      assert:
        that:
          # Verificando que a configuração de data_dir está presente.
          - "{{ nomad_config_file_content.results[0]['content'] | b64decode | regex_search(data_dir_regex, multiline=True) | length }} > 0"
          - "{{ nomad_config_file_content.results[1]['content'] | b64decode | regex_search(data_dir_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de ACL está presente e com o valor correto.
          - "{{ nomad_config_file_content.results[0]['content'] | b64decode | regex_search(acl_enabled_regex, multiline=True) | length }} > 0"
          - "{{ nomad_config_file_content.results[1]['content'] | b64decode | regex_search(acl_enabled_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de telemetry está presente.
          - "{{ nomad_config_file_content.results[0]['content'] | b64decode | regex_search(telemetry_regex, multiline=True) | length }} > 0"
          - "{{ nomad_config_file_content.results[1]['content'] | b64decode | regex_search(telemetry_regex, multiline=True) | length }} > 0"

      vars:
        data_dir_regex: '^data_dir\s+=\s+".+"'
        acl_enabled_regex: "^acl\\s+{\\s+enabled\\s+=\\s+{{ nomad_acl_enabled_str }}"
        telemetry_regex: '^telemetry\s+{\s+'

    - name: "Ler data_dir do Nomad"
      stat:
        path: /opt/nomad/data
      register: nomad_data_dir_output
    - name: "Verificar que o diretório de dados do Nomad existe"
      assert:
        that:
          - nomad_data_dir_output.stat.exists
          - nomad_data_dir_output.stat.isdir
          - "nomad_data_dir_output.stat.gr_name == '{{nomad_group}}'"
          - "nomad_data_dir_output.stat.pw_name == '{{nomad_user}}'"
    - name: "Ler CNI-plugin"
      stat:
        path: /opt/cni/bin/bridge
      register: nomad_cni_plugin_output
    - name: "Verificar cni-plugin"
      assert:
        that:
          - nomad_cni_plugin_output.stat.exists
          - nomad_cni_plugin_output.stat.mode == '0755'

    - name: "Roda o script de bootstrap em modo client"
      command: "/usr/local/bin/nomad_bootstrap.sh client '\"127.0.0.1\"' brasil mentoria"
      register: nomad_bootstrap_client_output
    - name: "Ler conteúdo do arquivo de configuração do cliente"
      slurp:
        src: "/etc/nomad.d/client.hcl"
      register: nomad_client_config_file_content
    - name: "Verificar que o script de bootstrap renderizou o arquivo de configuração do cliente"
      assert:
        that:
          - nomad_bootstrap_client_output.rc == 0
          # Verificando que a configuração de retry_join está presente.
          - "{{ nomad_client_config_file_content['content'] | b64decode | regex_search(retry_join_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de region está presente e com o valor correto.
          - "{{ nomad_client_config_file_content['content'] | b64decode | regex_search(region_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de datacenter está presente e com o valor correto.
          - "{{ nomad_client_config_file_content['content'] | b64decode | regex_search(datacenter_regex, multiline=True) | length }} > 0"
      vars:
        retry_join_regex: '^\s*retry_join\s+=\s+\[\"127\.0\.0\.1\"\]'
        region_regex: '^region\s+=\s+\"brasil\"$'
        datacenter_regex: '^datacenter\s+=\s+\"mentoria\"$'
    - name: "Limpar arquivo de configuração do cliente"
      file:
        path: "/etc/nomad.d/client.hcl"
        state: "absent"

    - name: "Roda o script de bootstrap em modo server"
      command: "/usr/local/bin/nomad_bootstrap.sh server 1 '\"127.0.0.1\"' brasil mentoria"
      register: nomad_bootstrap_server_output
    - name: "Ler conteúdo do arquivo de configuração do server"
      slurp:
        src: "/etc/nomad.d/server.hcl"
      register: nomad_server_config_file_content
    - name: "Verificar que o script de bootstrap renderizou o arquivo de configuração do server"
      assert:
        that:
          - nomad_bootstrap_server_output.rc == 0
          # Verificando que a configuração de bootrap_expect está presente.
          - "{{ nomad_server_config_file_content['content'] | b64decode | regex_search(bootstrap_expect_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de retry_join está presente.
          - "{{ nomad_server_config_file_content['content'] | b64decode | regex_search(retry_join_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de region está presente e com o valor correto.
          - "{{ nomad_server_config_file_content['content'] | b64decode | regex_search(region_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de datacenter está presente e com o valor correto.
          - "{{ nomad_server_config_file_content['content'] | b64decode | regex_search(datacenter_regex, multiline=True) | length }} > 0"
      vars:
        bootstrap_expect_regex: '^\s*bootstrap_expect\s+=\s+1$'
        retry_join_regex: '^\s*retry_join\s+=\s+\[\"127\.0\.0\.1\"\]'
        region_regex: '^region\s+=\s+\"brasil\"$'
        datacenter_regex: '^datacenter\s+=\s+\"mentoria\"$'
    - name: "Limpar arquivo de configuração do server"
      file:
        path: "/etc/nomad.d/server.hcl"
        state: "absent"

    - name: "Roda o script de bootstrap em modo both"
      command: "/usr/local/bin/nomad_bootstrap.sh both 1 '\"127.0.0.1\"' brasil mentoria"
      register: nomad_bootstrap_both_output
    - name: "Ler conteúdo do arquivo de configuração do cliente e server"
      slurp:
        src: "/etc/nomad.d/{{item}}.hcl"
      loop:
        - client
        - server
      register: nomad_both_config_file_content
    - name: "Verificar que o script de bootstrap renderizou os arquivos  de configuração do cliente e server"
      assert:
        that:
          - nomad_bootstrap_both_output.rc == 0
          # Verificando que a configuração de bootrap_expect está presente.
          - "{{ nomad_both_config_file_content.results[1]['content'] | b64decode | regex_search(bootstrap_expect_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de retry_join está presente.
          - "{{ nomad_both_config_file_content.results[0]['content'] | b64decode | regex_search(retry_join_regex, multiline=True) | length }} > 0"
          - "{{ nomad_both_config_file_content.results[1]['content'] | b64decode | regex_search(retry_join_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de region está presente e com o valor correto.
          - "{{ nomad_both_config_file_content.results[0]['content'] | b64decode | regex_search(region_regex, multiline=True) | length }} > 0"
          - "{{ nomad_both_config_file_content.results[1]['content'] | b64decode | regex_search(region_regex, multiline=True) | length }} > 0"
          # Verificando que a configuração de datacenter está presente e com o valor correto.
          - "{{ nomad_both_config_file_content.results[0]['content'] | b64decode | regex_search(datacenter_regex, multiline=True) | length }} > 0"
          - "{{ nomad_both_config_file_content.results[1]['content'] | b64decode | regex_search(datacenter_regex, multiline=True) | length }} > 0"
      vars:
        bootstrap_expect_regex: '^\s*bootstrap_expect\s+=\s+1$'
        retry_join_regex: '^\s*retry_join\s+=\s+\[\"127\.0\.0\.1\"\]'
        region_regex: '^region\s+=\s+\"brasil\"$'
        datacenter_regex: '^datacenter\s+=\s+\"mentoria\"$'
    - name: "Limpar arquivo de configuração do cliente e server"
      file:
        path: "/etc/nomad.d/{{item}}.hcl"
        state: "absent"
      loop:
        - client
        - server
